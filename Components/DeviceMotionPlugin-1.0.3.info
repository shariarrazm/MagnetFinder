{"Name":"Device Motion Plugin","Id":1604,"Alias":"DeviceMotionPlugin","Description":"# Device Motion Plugin details\n\nCross platform plugin to detect motion sensors value changes for: Accelerometer, Gyroscope, Magnetometer, Compass. Across iOS, Android and Windows Phone.\n\n### Features:\n* Start listening sensor value changes\n* Stop listening sensor value changes\n* Access sensor value changes\n* Check if is listening sensor\n\n\n### Example\n```\nCrossDeviceMotion.Current.Start (MotionSensorType.Accelerometer);\nCrossDeviceMotion.Current.SensorValueChanged+=(s, a)=\u003e{\n\n\t\t\t\tswitch(a.SensorType)\n\t\t\t\t{\n\t\t\t\t   \n\t\t\t\t   case MotionSensorType.Accelerometer:\n\t\t\t\t\tDebug.WriteLine(\"A: {0},{1},{2}\",((MotionVector)a.Value).X,((MotionVector)a.Value).Y,((MotionVector)a.Value).Z);\n\t\t\t\t\n\t\t\t\t\tbreak;\n\n\t\t\t   }\n}\n```\n\nWorks completely from a shared code or PCL project.","Version":"1.0.3","Summary":"Detect motion sensor value changes for: Accelerometer, Gyroscope, Magnetometer, Compass.","QuickStart":"# Getting Started with Device Motion Plugin\n\n### API Usage\n\nCall **CrossDeviceMotion.Current** from any project or PCL to gain access to APIs.\n\nEnum of Device Motion Sensor Type:\n\n```\n/// \u003csummary\u003e\n/// Motion sensor type enum. \n/// \u003c/summary\u003e\n\tpublic enum MotionSensorType\n\t{\n        /// \u003csummary\u003e\n        /// Accelerometer Sensor\n        /// \u003c/summary\u003e\n\t\tAccelerometer,\n        /// \u003csummary\u003e\n        /// Gyroscope Sensor\n        /// \u003c/summary\u003e\n\t\tGyroscope,\n        /// \u003csummary\u003e\n        /// Magnetometer Sensor\n        /// \u003c/summary\u003e\n\t\tMagnetometer,\n        /// \u003csummary\u003e\n        /// Compass Sensor\n        /// \u003c/summary\u003e\n        Compass\n\n\t}\n```\nEnum of Device Motion Sensor Delay:\n\n```\n/// \u003csummary\u003e\n/// Motion sensor delay enum.(Specified in milliseconds)\n/// \u003c/summary\u003e\n\tpublic enum MotionSensorDelay \n\t{\n\t\t/// \u003csummary\u003e\n\t\t/// The fastest.\n\t\t/// \u003c/summary\u003e\n\t\tFastest = 0,\n\t\t/// \u003csummary\u003e\n\t\t/// The game.\n\t\t/// \u003c/summary\u003e\n\t\tGame = 20,\n\t\t/// \u003csummary\u003e\n\t\t/// The user interface.\n\t\t/// \u003c/summary\u003e\n\t\tUi = 60,\n\t\t/// \u003csummary\u003e\n\t\t/// The default.\n\t\t/// \u003c/summary\u003e\n\t\tDefault = 200\n\n\t}\n```\nEnum of Device Motion Sensor Value Type:\n\n```\n/// \u003csummary\u003e\n/// Motion sensor value type.\n/// \u003c/summary\u003e\n    public enum MotionSensorValueType\n    {\n\t\t/// \u003csummary\u003e\n\t\t/// Single value. \n\t\t/// \u003c/summary\u003e\n        Single,\n\t\t/// \u003csummary\u003e\n\t\t/// Vector value.\n\t\t/// \u003c/summary\u003e\n        Vector\n    }\n```\n\n**Start**\n\nStarts sensor reading for the specified sensor type and sensor delay interval.\n```\n/// \u003csummary\u003e\n/// Start reading for the specified sensorType (Motion Sensor Type Enum Value) with an update delay interval (Motion Sensor Delay Enum Value) .\n/// \u003c/summary\u003e\n/// \u003cparam name=\"sensorType\"\u003eSensor type.\u003c/param\u003e\n/// \u003cparam name=\"interval\"\u003eInterval.\u003c/param\u003e\n\nvoid Start(MotionSensorType sensorType,MotionSensorDelay interval);\n```\n\n**Stop**\n\nStops sensor reading for the specified sensor type.\n```\n/// \u003csummary\u003e\n/// Stop reading for the specified sensorType. (Motion Sensor Type Enum Value)\n/// \u003c/summary\u003e\n/// \u003cparam name=\"sensorType\"\u003eSensor type.\u003c/param\u003e\nvoid Stop(MotionSensorType sensorType);\n```\n\n**IsActive**\n```\n/// \u003csummary\u003e\n/// Determines whether the specified sensorType (Motion Sensor Type Enum Value) is active or not.\n/// \u003c/summary\u003e\n/// \u003cparam name=\"sensorType\"\u003eSensor type.\u003c/param\u003e\nbool IsActive(MotionSensorType sensorType);\n```\n\nReturns true if specified sensor type is active, false if not.\n\n#### Events\n\nYou can subscribe to \u003cb\u003eSensorValueChanged\u003c/b\u003e, which will return \u003cb\u003eSensorValueChangedEventArgs\u003c/b\u003e with all information you need. This occurs when a new sensor reading is available at the specified interval. \n\n```\n/// \u003csummary\u003e\n/// Occurs when sensor value changed.\n/// \u003c/summary\u003e\nevent SensorValueChangedEventHandler SensorValueChanged;\n```\n**SensorValueChangedEventArgs Properties**\n```\n/// \u003csummary\u003e\n/// Type of the sensor.\n/// \u003c/summary\u003e\n/// \u003cvalue\u003eThe type of the sensor.\u003c/value\u003e\npublic MotionSensorType SensorType;\n/// \u003csummary\u003e\n/// Motion Value\n/// \u003c/summary\u003e\n/// \u003cvalue\u003eValue/value\u003e\npublic MotionValue Value;\n/// \u003csummary\u003e\n/// Gets the type of the value. Indicates if sensor value is single value or a vector value\n/// \u003c/summary\u003e\n/// \u003cvalue\u003eThe type of the value.\u003c/value\u003e\npublic MotionSensorValueType ValueType\n```\nIf \u003cb\u003eValueType\u003c/b\u003e is \u003cb\u003eMotionSensorValueType.Vector\u003c/b\u003e cast the \u003cb\u003eValue\u003c/b\u003e to \u003cb\u003eMotionVector\u003c/b\u003e to get the X,Y,Z Vector values. If \u003cb\u003eValueType\u003c/b\u003e is \u003cb\u003eMotionSensorValueType.Single\u003c/b\u003e cast it to \u003cb\u003eMotionValue\u003c/b\u003e and use the \u003cb\u003eValue\u003c/b\u003e property of the \u003cb\u003eMotionValue\u003c/b\u003e to get the sensor measure. For Compass sensor returns single value other sensors returns vector value\n\n**Reading Sensor Changes Example**\n```\nCrossDeviceMotion.Current.SensorValueChanged+=(s, a)=\u003e{\n\t\t\n\t\t\t\tswitch(a.SensorType){\n\t\t\t\t   case MotionSensorType.Accelerometer:\n\t\t\t\t\t   Debug.WriteLine(\"A: {0},{1},{2}\",((MotionVector)a.Value).X,((MotionVector)a.Value).Y,((MotionVector)a.Value).Z);\n\t\t\t\t\tbreak;\n\t\t\t\t    case MotionSensorType.Compass:\n\t\t\t\t\t   Debug.WriteLine(\"H: {0}\",a.Value);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n};\n```\n#### Notes\n\n* Magnetometer API is not available for Windows Phone 8 (Silverlight). \n* On iOS for Compass sensor interval parameter is ignored for the moment.","Hash":"62dc340c1f6a454ce50cf6b361e584e0","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}